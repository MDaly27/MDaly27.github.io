{
  "title": "My Blog",
  "description": "JSON-driven blog on GitHub Pages",
  "author": "Matt Daly",
  "posts": [
    {
      "slug": "hackers-in-the-bazaar-reflection",
      "title": "Reading 01 Reflection – Hackers in the Bazaar",
      "date": "2025-08-31",
      "tags": ["reading","reflection","history"],
      "summary": "Reflection on early MIT hacker culture from TX-0, PDP-1, and the hacker ethic.",
      "content_html": "\n<h2>Reading 01 Reflection – Hackers in the Bazaar - 8/31/2025</h2>\n\n<p>This first part of <em>Hackers in the Bazaar</em> presented an inside look into the emerging hacker culture at MIT in the 50s–60s, looking into their social lives, the kind of technology they were building, and the larger implications to this movement.</p>\n\n<figure>\n  <img src=\"tx-0.jpg\" alt=\"Users working on a TX-0 computer\">\n  <figcaption style=\"color:#9aa3af; font-size:0.9em; text-align:center; margin-top:6px;\">\n    Users working on a TX-0 computer\n  </figcaption>\n</figure>\n\n<p>In the late 50s, computers were only just starting to appear on college campuses, with MIT being one of the first. At this time, computers were still “Hulking Giant” machines, taking up entire floors of buildings. Users would write programs in machine code by hand, punch them into cards, then hand them over to a team of dedicated computer operators, who would run programs in batches and then return the output at some later point. Users would not have the option to debug errors live, as computer time was scarce, and machines were often highly protected due to their cost.</p>\n\n<p>At MIT the origin of the hacker culture began with the TX-0 and PDP-1, early minicomputers either donated or procured by the institute. With these minicomputers, as opposed to the Hulking Giants, students were given unprecedented access to the actual machine. Among the group of students who gravitated towards the computers were a group of especially dedicated young engineers who subscribed to a revolutionary new set of ideas, known as the hacker ethic.</p>\n\n<p>The early hackers believed that the only way to understand something was to work with it hands-on, and to learn exactly how it functioned. Additionally, to the hackers, producing actual results (whether a new version of <em>Spacewar!</em> or a compiler for LISP) was what really mattered, not characteristics like race, appearance, or social skills. Information, like source code, should be freely available to all, not locked behind any barriers. Finally, authority should be disobeyed whenever it got in the way of access to technology.</p>\n\n<figure>\n  <img src=\"Spacewar!-PDP-1-20070512.jpg\" alt=\"Spacewar! on the PDP-1\">\n  <figcaption style=\"color:#9aa3af; font-size:0.9em; text-align:center; margin-top:6px;\">\n    Spacewar! on the PDP-1\n  </figcaption>\n</figure>\n\n<p>These new ideas were a whole new way of looking at the world, spurred by the new computers and the mindsets of the hackers who gravitated to them. They contrasted greatly with the bureaucratic routine of academia, especially at elite institutions. Though the hacker group at MIT was filled with technical geniuses who were building things even the military and IBM likely did not yet have, many failed out of college. They adopted a 30 hour work day, maximizing flow state time on the PC, often at the expense of their classes. Yet this did not deter the hackers, who felt the only important thing in the world was to create new innovations on the PC (called “Hacks”) and showcase them to their hacker peers.</p>\n\n<p>The hacker culture at MIT is romanticized – a group of young kids delving into an unknown realm and creating such cool hacks as sci-fi games, telephone exploits, and the first programming languages. These shy and socially inept kids were able to find their power through the computer, and also build a community of like-minded people. In reality this lifestyle worked for some for a little while, but also was simply unhealthy in the long run, and several of the MIT golden age hackers attempted suicide. This group made tremendous progress both in building new computer innovations, and also setting up the culture for digital freedom and cooperation that constitutes the hacker ethic. Yet in doing so they lived obsessive, asocial lives which often (and during a Vietnam Protest against the MIT lab even literally) barricaded themselves off from greater society in the process.</p>\n\n<p>Before reading this section, I had some idea of the origin of hackers, being the first master programmers. I was not however, aware of the true origins behind the culture, with the Tech Model Railroad Club at MIT. Also, the whole thing was so much more extreme than I would have anticipated. True hackers were doing 30 hour work days to grind out code, and even sleeping in cots at the computer lab – or even in the ceiling above it – jumping on the machine whenever someone scheduled to use it did not show up.</p>\n\n<p>To me, this hacker ethic is inspiring. It shows how people who may be outcasts among the greater public can find purpose and fit in. It also is somewhat scary, as I realize that to ever achieve the mastery of these elite hackers, a similar absolute devotion to hacking would be required. The great hackers like Greenblatt, Gosper, Samson, Kotok, Russell, and Nelson are to be admired, and their names should forever be part of the computer science origin story. Yet I would be cautious to mimic their lives exactly, seeing the extremes that they went during this golden age.</p>\n"
    },
    {
      "slug": "hardware-hackers-reflection",
      "title": "Hardware Hackers Reflection",
      "date": "2025-09-08",
      "tags": ["reading","reflection","hardware"],
      "summary": "Reflection on the West Coast hardware hackers, the Homebrew Club, and the rise of Apple.",
      "content_html": "\n<h2>Hardware Hackers Reflection</h2>\n\n<p>Hardware hackers maintained many of the tenets of the original True Hackers. They believed information and hands-on computer access should be open to the public to try. They also distrusted authority and held a disdain for bureaucracy, which they felt limited innovation.</p>\n\n<p>This new breed of hackers on the West Coast, however, were distinct in some ways from their MIT counterparts. Instead of closing themselves off from the general public and restricting their social circles to a small hacker group, the California hackers focused on spreading computing to everyone. Inspired in part by the political activism of the time, leading figures in the California movement believed computers could be a source of social change — but only if they were introduced to the public.</p>\n\n<p>To do so, groups built terminals in record shops and public libraries that connected back to a donated IBM “Hulking Giant” machine in Berkeley. Meanwhile, new hardware innovations coming out of Silicon Valley enabled the introduction of the first microprocessors. Among them, the Altair 8080 stands as one of the most influential, opening computing to many new hobbyists — aided by marketing through growing computer magazines.</p>\n\n<figure>\n  <img src=\"homebrew.jpg\" alt=\"Meeting of the Homebrew Computer Club\">\n  <figcaption style=\"color:#9aa3af; font-size:0.9em; text-align:center; margin-top:6px;\">\n    Meeting of the Homebrew Computer Club\n  </figcaption>\n</figure>\n\n<p>The Homebrew Computer Club, which formed largely to help users learn and share hacks on microprocessors, embodied the hacker ethic that information should be shared openly. Users built and shared tools, operating systems, and a version of Tiny BASIC with other members. They built on and improved each other’s code.</p>\n\n<p>One member of the Homebrew Club was Steve Wozniak, who later partnered with Steve Jobs as the chief engineer of the hardware startup Apple. Woz embodied the West Coast hacker spirit, with a dream to make computers available to all. His work in developing the Apple I produced one of the first PCs that could be bought and used by the general public. This marked a great transition in hacking. With an explosion of new users, there was bound to be a completely new generation of hackers.</p>\n\n<p>This commercialization of computers did result in some tensions. As companies vied to produce the best and most profitable chips and computers, parts of the collaborative hacker spirit gave way to a more secretive culture at hardware firms. Although these companies began with the aim of providing computers to the masses, they gradually shifted away from one of the core tenets of the hacker ethic and toward authoritarianism.</p>\n\n<p>Overall, I agree that technology can be used for good, especially with the internet. The internet has allowed information to be shared more freely than ever before, which is certainly a positive. On the other hand, addictive social media has taken away some aspects of society, and I remain uncertain about the long-term effects of AI on humanity. Still, I ultimately think the internet was a necessary progression and has had overwhelmingly positive effects.</p>\n"
    },
    {
      "slug": "hacker-heroes-part-3",
      "title": "Hacker Heroes of the Revolution Part 3",
      "date": "2025-09-15",
      "tags": ["reading","reflection","games"],
      "summary": "Reflection on the third generation of hackers focused on games, companies like On-Line, and the rise of royalties.",
      "content_html": "\n<h2>Hacker Heroes of the Revolution Part 3 Blog</h2>\n\n<p>This final part of <em>Hackers: Heroes of the Computer Revolution</em> deals with the new “Third Generation” of hackers, who became fluent in programming the Apple II (and Atari and PET counterparts) PCs.</p>\n\n<p>These hackers focused on games, and discovered tricks to expand the capabilities of the limited hardware. For example, by using a dithering technique, they expanded the available colors from 4 to 16 on the Apple computer. Sound was split into five tracks and merged back together to add a scream sound effect to a game—taking up 20% of RAM. Compression techniques were developed to store images on the limited-sized cassettes and floppy disks.</p>\n\n<p>It is true that much of this third generation of hackers were focused on games. This was because that was what the growing market of personal computer users wanted. Many people getting into computers for the first time were not expert coders. They wanted to see what their computer could do, and were not going to code a version of Spacewar! Instead, they bought floppy drives loaded with the latest generation of games, each with some new technique or mechanic that expanded upon what was previously available.</p>\n\n<p>The leading game developer of the 80s was called On-Line, a startup founded on text-based adventure games. They headquartered in a rural mountain town in California, with only a few stores and restaurants. As their games grew in popularity, being distributed at computer stores around the country, hackers submitted their own games. If they were good, On-Line or their contemporaries would hire them and provide royalties on the games.</p>\n\n<figure>\n  <img src=\"frogger-arcade-scr-gameplay.png\" alt=\"Frogger by On-Line on the Atari PC\">\n  <figcaption style=\"color:#9aa3af; font-size:0.9em; text-align:center; margin-top:6px;\">\n    Frogger by On-Line on the Atari PC\n  </figcaption>\n</figure>\n\n<p>Hits like <em>Frogger</em>—a port from the arcade game to Atari and Apple (this version was much worse)—made their authors hundreds of thousands in royalties. It was a cool movement, somewhat reminiscent of the original MIT hacker scene. Developers were happy to share their techniques and low-level graphics exploits with whoever was interested, regardless of which company they worked for.</p>\n\n<p>As the game market tightened up, however, this all changed. Companies were more secretive about their upcoming releases, hoping not to be outpaced by competitors. To stop piracy, they figured out techniques to make non-copyable disks that even dedicated hackers could not crack. All of this kept the source code out of reach of hackers.</p>\n\n<p>The idea of owning a piece of software and gatekeeping it was against the hacker ethic, but it became widespread. It ensured the developer would be able to profit from their product, but also put barriers on who could try out the software and what one could learn from it. Overall, it was a necessary side effect of software companies’ growth. These were not simply hobby projects being passed around a Homebrew meeting. These programs took months to build and were the livelihood of their developers. Yet the new techniques used to prevent users from looking under the hood sadly prevented community-made tools and updates from benefiting users.</p>\n\n<p>Game developers also shifted away from their egalitarian, hacker-centric structure to a more standard bureaucratic structure that hackers were unhappy with. Seeing that his company was growing to the scale of a few hundred employees, Ken Williams—who founded On-Line with his wife—decided to hire a new corporate president and enforce strict bureaucratic rules. Williams would later regret this decision, firing the new president, but not before he lost all his superstar programmers.</p>\n\n<p>Game hacking was a cool movement in the early 80s that led to the rise of hotshot programmers who churned out hit games that spread throughout computer stores around the nation and made them rich. It led to new generations of companies that showed how the hacker ethic could be a part of industry, even if it ultimately circled back to the old ways as these companies grew and aged. Overall, this era was critically important in pushing the limits of the available computer hardware to find out what was possible and find a way for an ordinary person to use a computer without needing to be a programmer themselves.</p>\n"
    },
    {
      "slug": "paul-graham-hacker-reflection",
      "title": "Paul Graham on Hackers and Society",
      "date": "2025-09-28",
      "tags": ["reading","reflection","paulgraham"],
      "summary": "Reflection on Paul Graham’s essays and how his vision of hackers aligns and contrasts with Steven Levy.",
      "content_html": "\n<h2>Paul Graham on Hackers and Society</h2>\n\n<p>Paul Graham’s vision of a hacker aligns quite well with what Steven Levy suggested in <em>Hackers: Heroes of the Computer Revolution</em>. Graham discussed how lockpicking, subverting copyright protection, and a fanatical devotion to free information are all super important to hacker culture. He also contrasted hacking with traditional sciences and academics. In <em>Hackers and Painters</em>, Graham suggests that the hacking process is not most comparable to that of scientists, engineers, or architects, but instead painters. You get better at hacking by doing it and creating original ideas, just as painters do by practicing their craft.</p>\n\n<p>The subject of these essays differed from Levy’s book in that they speak in a broader sense. In “Why Nerds are Unpopular,” Graham discusses the flaws in the American education system, believing that it creates <em>Lord of the Flies</em> scenarios in which the smart kids are seen as outcasts. This point was interesting to me, as I had not put much consideration into whether primary education (as it is now) may not be the best system for youth. I think students may be better suited with more time to explore and create with hands-on tools and activities. For elementary schoolers, recess should be longer; lots of things can be learned during playtime and socialization.</p>\n\n<p>Graham seems to place a considerable amount of attention on society and politics, seemingly associating hackerism with Libertarianism. Levy’s portrayal of hackers, especially the early MIT scene, is as completely separate from the outside world. To him, a hacker was solely connected with the computer and unconcerned with politics and fashion trends. I guess Graham does agree with the fashion part, but he sees a hacker as naturally political in a way I do not believe Levy portrayed.</p>\n\n<p>Overall I agree with Graham on a lot of his points. I think we should consider contentious ideas rather than trying to prevent their discussion. One thing I wish he did more of was to provide some ideas for how to improve things like school and social taboos. I think his version of a hacker is something I would aspire to be, but I would also say that not every hacker will fit this vision exactly.</p>\n"
    },
    {
      "slug": "lisp-and-fortran-reflection",
      "title": "Lisp and Fortran Reflection",
      "date": "2025-10-06",
      "tags": ["reading","reflection","languages"],
      "summary": "Reflection on the enduring contrast between Lisp and Fortran, their roles in computing, and personal thoughts on Lisp's power.",
      "content_html": "\n<h2>Lisp and Fortran Reflection</h2>\n\n<p>Of the original programming languages that emerged in the 1950s, only two really remain relevant today—Lisp and Fortran. Interestingly, they are almost opposites of each other. Lisp originated from mathematical theory and was never originally intended to be implemented. It looks like nested parentheses and is actually written out in parse tree order. Fortran, on the other hand, was more like machine code and only later adopted concepts that made it more user-friendly and similar to Lisp. While Lisp saw adoption in the early AI field, Fortran continues to run finance systems because they were originally written in it.</p>\n\n<p>Lisp is a more high-level and abstract language, and this makes it powerful. Paul Graham discusses how his startup Viaweb was able to leverage Lisp's abstract nature to do more with less code. It’s estimated that for complex problems, a single line of Lisp can do the work of 20 lines of C. Lisp allowed Viaweb to leverage quick development time to compete with larger firms that were also trying to make online stores, but were using languages like Java or C++ to write their servers. In this sense, Lisp may be a more powerful language.</p>\n\n<figure>\n  <img src=\"parseTree01.gif\" alt=\"Lisp Parse Tree\">\n  <figcaption style=\"color:#9aa3af; font-size:0.9em; text-align:center; margin-top:6px;\">\n    Parse tree visualization in Lisp\n  </figcaption>\n</figure>\n\n<p>Graham also agrees that there are reasons larger companies may wish to stick with a more industry-standard language like Java—more programmers, incremental development, and extensive libraries.</p>\n\n<p>I have some experience working in Lisp in Programming Paradigms, and I really enjoy the language. Its parse tree format is completely unorthodox but can be quite powerful. Also, concepts like currying and macros, as Graham was discussing, may not have equivalents in other languages. After reading these articles, I am interested in looking back at Lisp and checking out some other more esoteric languages like Rust.</p>\n"
    }
  ]
}

