{
  "title": "My Blog",
  "description": "JSON-driven blog on GitHub Pages",
  "author": "Matt Daly",
  "posts": [
    {
      "slug": "hackers-in-the-bazaar-reflection",
      "title": "Reading 01 Reflection \u2013 Hackers in the Bazaar",
      "date": "2025-08-31",
      "tags": [
        "reading",
        "reflection",
        "history"
      ],
      "summary": "Reflection on early MIT hacker culture from TX-0, PDP-1, and the hacker ethic.",
      "content_html": "<h2>Reading 01 Reflection \u2013 Hackers in the Bazaar - 8/31/2025</h2>\n<p>This first part of <em>Hackers in the Bazaar</em> presented an inside look into the emerging hacker culture at MIT in the 50s\u201360s...</p>"
    },
    {
      "slug": "hardware-hackers-reflection",
      "title": "Hardware Hackers Reflection",
      "date": "2025-09-08",
      "tags": [
        "reading",
        "reflection",
        "hardware"
      ],
      "summary": "Reflection on the West Coast hardware hackers, the Homebrew Club, and the rise of Apple.",
      "content_html": "<h2>Hardware Hackers Reflection</h2><p>Hardware hackers maintained many of the tenets...</p>"
    },
    {
      "slug": "hacker-heroes-part-3",
      "title": "Hacker Heroes of the Revolution Part 3",
      "date": "2025-09-15",
      "tags": [
        "reading",
        "reflection",
        "games"
      ],
      "summary": "Reflection on the third generation of hackers focused on games, companies like On-Line, and the rise of royalties.",
      "content_html": "<h2>Hacker Heroes of the Revolution Part 3 Blog</h2><p>This final part of <em>Hackers: Heroes of the Computer Revolution</em> deals with...</p>"
    },
    {
      "slug": "paul-graham-hacker-reflection",
      "title": "Paul Graham on Hackers and Society",
      "date": "2025-09-28",
      "tags": [
        "reading",
        "reflection",
        "paulgraham"
      ],
      "summary": "Reflection on Paul Graham\u2019s essays and how his vision of hackers aligns and contrasts with Steven Levy.",
      "content_html": "<h2>Paul Graham on Hackers and Society</h2><p>Paul Graham\u2019s vision of a hacker aligns quite well...</p>"
    },
    {
      "slug": "lisp-and-fortran-reflection",
      "title": "Lisp and Fortran Reflection",
      "date": "2025-10-06",
      "tags": [
        "reading",
        "reflection",
        "languages"
      ],
      "summary": "Reflection on the enduring contrast between Lisp and Fortran, their roles in computing, and personal thoughts on Lisp's power.",
      "content_html": "\n<h2>Lisp and Fortran Reflection</h2>\n\n<p>Of the original programming languages that emerged in the 1950s, only two really remain relevant today\u2014Lisp and Fortran. Interestingly, they are almost opposites of each other. Lisp originated from mathematical theory and was never originally intended to be implemented. It looks like nested parentheses and is actually written out in parse tree order. Fortran, on the other hand, was more like machine code and only later adopted concepts that made it more user-friendly and similar to Lisp. While Lisp adoption in the early AI field, Fortan continues to run finance systems because they were originally written in it.\n\n<figure>\n  <img src=\"parseTree01.gif\" alt=\"Lisp Parse Tree\">\n  <figcaption style=\"color:#9aa3af; font-size:0.9em; text-align:center; margin-top:6px;\">\n    Parse tree visualization in Lisp\n  </figcaption>\n</figure>\n\n<p>Lisp is a more high-level and abstract language, and this makes it powerful. Paul Graham discusses how his startup Viaweb was able to leverage Lisp's abstract nature to do more with less code. It\u2019s estimated that for complex problems, a single line of Lisp can do the work of 20 lines of C. Lisp allowed Viaweb to leverage quick development time to compete with larger firms that were also trying to make online stores, but were using languages like Java or C++ to write their servers. In this sense, Lisp ...\n\n<p>Graham also agrees that there are reasons larger companies may wish to stick with a more industry-standard language like Java\u2014more programmers, incremental development, and extensive libraries.</p>\n\n<p>I have some experience working in Lisp in Programming Paradigms, and I really enjoy the language. Its parse tree format is completely unorthodox but can be quite powerful. Also, concepts like currying and macros, as Graham discussed, may not have equivalents in other languages. After reading these articles, I\u2019m interested in looking back at Lisp and exploring other more esoteric languages like Rust.</p>\n"
    }
  ]
}
